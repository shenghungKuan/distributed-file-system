// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/dfs.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Wrapper message that can contain any type of DFS message
type DFSMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*DFSMessage_Heartbeat
	//	*DFSMessage_StoreRequest
	//	*DFSMessage_StoreResponse
	//	*DFSMessage_RetrieveRequest
	//	*DFSMessage_RetrieveResponse
	//	*DFSMessage_DeleteRequest
	//	*DFSMessage_DeleteResponse
	//	*DFSMessage_ListRequest
	//	*DFSMessage_ListResponse
	//	*DFSMessage_NodeStatusRequest
	//	*DFSMessage_NodeStatusResponse
	//	*DFSMessage_ChunkStoreRequest
	//	*DFSMessage_ChunkStoreResponse
	//	*DFSMessage_ChunkRetrieveRequest
	//	*DFSMessage_ChunkRetrieveResponse
	Message       isDFSMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DFSMessage) Reset() {
	*x = DFSMessage{}
	mi := &file_proto_dfs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DFSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DFSMessage) ProtoMessage() {}

func (x *DFSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DFSMessage.ProtoReflect.Descriptor instead.
func (*DFSMessage) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{0}
}

func (x *DFSMessage) GetMessage() isDFSMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DFSMessage) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *DFSMessage) GetStoreRequest() *StoreRequest {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_StoreRequest); ok {
			return x.StoreRequest
		}
	}
	return nil
}

func (x *DFSMessage) GetStoreResponse() *StoreResponse {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_StoreResponse); ok {
			return x.StoreResponse
		}
	}
	return nil
}

func (x *DFSMessage) GetRetrieveRequest() *RetrieveRequest {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_RetrieveRequest); ok {
			return x.RetrieveRequest
		}
	}
	return nil
}

func (x *DFSMessage) GetRetrieveResponse() *RetrieveResponse {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_RetrieveResponse); ok {
			return x.RetrieveResponse
		}
	}
	return nil
}

func (x *DFSMessage) GetDeleteRequest() *DeleteRequest {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_DeleteRequest); ok {
			return x.DeleteRequest
		}
	}
	return nil
}

func (x *DFSMessage) GetDeleteResponse() *DeleteResponse {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_DeleteResponse); ok {
			return x.DeleteResponse
		}
	}
	return nil
}

func (x *DFSMessage) GetListRequest() *ListRequest {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_ListRequest); ok {
			return x.ListRequest
		}
	}
	return nil
}

func (x *DFSMessage) GetListResponse() *ListResponse {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_ListResponse); ok {
			return x.ListResponse
		}
	}
	return nil
}

func (x *DFSMessage) GetNodeStatusRequest() *NodeStatusRequest {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_NodeStatusRequest); ok {
			return x.NodeStatusRequest
		}
	}
	return nil
}

func (x *DFSMessage) GetNodeStatusResponse() *NodeStatusResponse {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_NodeStatusResponse); ok {
			return x.NodeStatusResponse
		}
	}
	return nil
}

func (x *DFSMessage) GetChunkStoreRequest() *ChunkStoreRequest {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_ChunkStoreRequest); ok {
			return x.ChunkStoreRequest
		}
	}
	return nil
}

func (x *DFSMessage) GetChunkStoreResponse() *ChunkStoreResponse {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_ChunkStoreResponse); ok {
			return x.ChunkStoreResponse
		}
	}
	return nil
}

func (x *DFSMessage) GetChunkRetrieveRequest() *ChunkRetrieveRequest {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_ChunkRetrieveRequest); ok {
			return x.ChunkRetrieveRequest
		}
	}
	return nil
}

func (x *DFSMessage) GetChunkRetrieveResponse() *ChunkRetrieveResponse {
	if x != nil {
		if x, ok := x.Message.(*DFSMessage_ChunkRetrieveResponse); ok {
			return x.ChunkRetrieveResponse
		}
	}
	return nil
}

type isDFSMessage_Message interface {
	isDFSMessage_Message()
}

type DFSMessage_Heartbeat struct {
	// Control messages
	Heartbeat *Heartbeat `protobuf:"bytes,1,opt,name=heartbeat,proto3,oneof"`
}

type DFSMessage_StoreRequest struct {
	StoreRequest *StoreRequest `protobuf:"bytes,2,opt,name=store_request,json=storeRequest,proto3,oneof"`
}

type DFSMessage_StoreResponse struct {
	StoreResponse *StoreResponse `protobuf:"bytes,3,opt,name=store_response,json=storeResponse,proto3,oneof"`
}

type DFSMessage_RetrieveRequest struct {
	RetrieveRequest *RetrieveRequest `protobuf:"bytes,4,opt,name=retrieve_request,json=retrieveRequest,proto3,oneof"`
}

type DFSMessage_RetrieveResponse struct {
	RetrieveResponse *RetrieveResponse `protobuf:"bytes,5,opt,name=retrieve_response,json=retrieveResponse,proto3,oneof"`
}

type DFSMessage_DeleteRequest struct {
	DeleteRequest *DeleteRequest `protobuf:"bytes,6,opt,name=delete_request,json=deleteRequest,proto3,oneof"`
}

type DFSMessage_DeleteResponse struct {
	DeleteResponse *DeleteResponse `protobuf:"bytes,7,opt,name=delete_response,json=deleteResponse,proto3,oneof"`
}

type DFSMessage_ListRequest struct {
	ListRequest *ListRequest `protobuf:"bytes,8,opt,name=list_request,json=listRequest,proto3,oneof"`
}

type DFSMessage_ListResponse struct {
	ListResponse *ListResponse `protobuf:"bytes,9,opt,name=list_response,json=listResponse,proto3,oneof"`
}

type DFSMessage_NodeStatusRequest struct {
	NodeStatusRequest *NodeStatusRequest `protobuf:"bytes,10,opt,name=node_status_request,json=nodeStatusRequest,proto3,oneof"`
}

type DFSMessage_NodeStatusResponse struct {
	NodeStatusResponse *NodeStatusResponse `protobuf:"bytes,11,opt,name=node_status_response,json=nodeStatusResponse,proto3,oneof"`
}

type DFSMessage_ChunkStoreRequest struct {
	// Storage node messages
	ChunkStoreRequest *ChunkStoreRequest `protobuf:"bytes,12,opt,name=chunk_store_request,json=chunkStoreRequest,proto3,oneof"`
}

type DFSMessage_ChunkStoreResponse struct {
	ChunkStoreResponse *ChunkStoreResponse `protobuf:"bytes,13,opt,name=chunk_store_response,json=chunkStoreResponse,proto3,oneof"`
}

type DFSMessage_ChunkRetrieveRequest struct {
	ChunkRetrieveRequest *ChunkRetrieveRequest `protobuf:"bytes,14,opt,name=chunk_retrieve_request,json=chunkRetrieveRequest,proto3,oneof"`
}

type DFSMessage_ChunkRetrieveResponse struct {
	ChunkRetrieveResponse *ChunkRetrieveResponse `protobuf:"bytes,15,opt,name=chunk_retrieve_response,json=chunkRetrieveResponse,proto3,oneof"`
}

func (*DFSMessage_Heartbeat) isDFSMessage_Message() {}

func (*DFSMessage_StoreRequest) isDFSMessage_Message() {}

func (*DFSMessage_StoreResponse) isDFSMessage_Message() {}

func (*DFSMessage_RetrieveRequest) isDFSMessage_Message() {}

func (*DFSMessage_RetrieveResponse) isDFSMessage_Message() {}

func (*DFSMessage_DeleteRequest) isDFSMessage_Message() {}

func (*DFSMessage_DeleteResponse) isDFSMessage_Message() {}

func (*DFSMessage_ListRequest) isDFSMessage_Message() {}

func (*DFSMessage_ListResponse) isDFSMessage_Message() {}

func (*DFSMessage_NodeStatusRequest) isDFSMessage_Message() {}

func (*DFSMessage_NodeStatusResponse) isDFSMessage_Message() {}

func (*DFSMessage_ChunkStoreRequest) isDFSMessage_Message() {}

func (*DFSMessage_ChunkStoreResponse) isDFSMessage_Message() {}

func (*DFSMessage_ChunkRetrieveRequest) isDFSMessage_Message() {}

func (*DFSMessage_ChunkRetrieveResponse) isDFSMessage_Message() {}

// Heartbeat message sent from storage nodes to controller
type Heartbeat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	FreeSpace     uint64                 `protobuf:"varint,3,opt,name=free_space,json=freeSpace,proto3" json:"free_space,omitempty"`
	TotalRequests uint64                 `protobuf:"varint,4,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	StoredFiles   []string               `protobuf:"bytes,5,rep,name=stored_files,json=storedFiles,proto3" json:"stored_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_proto_dfs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{1}
}

func (x *Heartbeat) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Heartbeat) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Heartbeat) GetFreeSpace() uint64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

func (x *Heartbeat) GetTotalRequests() uint64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *Heartbeat) GetStoredFiles() []string {
	if x != nil {
		return x.StoredFiles
	}
	return nil
}

// File chunk information
type ChunkInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Index         uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Size          uint64                 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	mi := &file_proto_dfs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkInfo) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChunkInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkInfo) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

// Storage request from client to controller
type StoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	TotalSize     uint64                 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	ChunkSize     uint32                 `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	NumChunks     uint32                 `protobuf:"varint,4,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreRequest) Reset() {
	*x = StoreRequest{}
	mi := &file_proto_dfs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRequest) ProtoMessage() {}

func (x *StoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRequest.ProtoReflect.Descriptor instead.
func (*StoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{3}
}

func (x *StoreRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StoreRequest) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *StoreRequest) GetChunkSize() uint32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *StoreRequest) GetNumChunks() uint32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

// Storage response from controller to client
type StoreResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChunkPlacements []*ChunkPlacement      `protobuf:"bytes,1,rep,name=chunk_placements,json=chunkPlacements,proto3" json:"chunk_placements,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	mi := &file_proto_dfs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{4}
}

func (x *StoreResponse) GetChunkPlacements() []*ChunkPlacement {
	if x != nil {
		return x.ChunkPlacements
	}
	return nil
}

// Chunk placement information
type ChunkPlacement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	ChunkIndex    uint32                 `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	StorageNodes  []string               `protobuf:"bytes,3,rep,name=storage_nodes,json=storageNodes,proto3" json:"storage_nodes,omitempty"` // Primary node first, then replicas
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkPlacement) Reset() {
	*x = ChunkPlacement{}
	mi := &file_proto_dfs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkPlacement) ProtoMessage() {}

func (x *ChunkPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkPlacement.ProtoReflect.Descriptor instead.
func (*ChunkPlacement) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{5}
}

func (x *ChunkPlacement) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkPlacement) GetChunkIndex() uint32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ChunkPlacement) GetStorageNodes() []string {
	if x != nil {
		return x.StorageNodes
	}
	return nil
}

// Retrieve request from client to controller
type RetrieveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveRequest) Reset() {
	*x = RetrieveRequest{}
	mi := &file_proto_dfs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRequest) ProtoMessage() {}

func (x *RetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Retrieve response from controller to client
type RetrieveResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChunkPlacements []*ChunkPlacement      `protobuf:"bytes,1,rep,name=chunk_placements,json=chunkPlacements,proto3" json:"chunk_placements,omitempty"`
	TotalSize       uint64                 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	ChunkSize       uint32                 `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RetrieveResponse) Reset() {
	*x = RetrieveResponse{}
	mi := &file_proto_dfs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveResponse) ProtoMessage() {}

func (x *RetrieveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveResponse.ProtoReflect.Descriptor instead.
func (*RetrieveResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveResponse) GetChunkPlacements() []*ChunkPlacement {
	if x != nil {
		return x.ChunkPlacements
	}
	return nil
}

func (x *RetrieveResponse) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *RetrieveResponse) GetChunkSize() uint32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// Delete request from client to controller
type DeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_proto_dfs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Delete response from controller to client
type DeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_proto_dfs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// List files request from client to controller
type ListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListRequest   bool                   `protobuf:"varint,1,opt,name=list_request,json=listRequest,proto3" json:"list_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_proto_dfs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{10}
}

func (x *ListRequest) GetListRequest() bool {
	if x != nil {
		return x.ListRequest
	}
	return false
}

// List files response from controller to client
type ListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*FileInfo            `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_proto_dfs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{11}
}

func (x *ListResponse) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

// File information
type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Size          uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	NumChunks     uint32                 `protobuf:"varint,3,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_proto_dfs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{12}
}

func (x *FileInfo) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetNumChunks() uint32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

// Node status request from client to controller
type NodeStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeStatus    bool                   `protobuf:"varint,1,opt,name=node_status,json=nodeStatus,proto3" json:"node_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeStatusRequest) Reset() {
	*x = NodeStatusRequest{}
	mi := &file_proto_dfs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusRequest) ProtoMessage() {}

func (x *NodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusRequest.ProtoReflect.Descriptor instead.
func (*NodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{13}
}

func (x *NodeStatusRequest) GetNodeStatus() bool {
	if x != nil {
		return x.NodeStatus
	}
	return false
}

// Node status response from controller to client
type NodeStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*NodeInfo            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	TotalSpace    uint64                 `protobuf:"varint,2,opt,name=total_space,json=totalSpace,proto3" json:"total_space,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeStatusResponse) Reset() {
	*x = NodeStatusResponse{}
	mi := &file_proto_dfs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusResponse) ProtoMessage() {}

func (x *NodeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusResponse.ProtoReflect.Descriptor instead.
func (*NodeStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{14}
}

func (x *NodeStatusResponse) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeStatusResponse) GetTotalSpace() uint64 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

// Node information
type NodeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	FreeSpace     uint64                 `protobuf:"varint,3,opt,name=free_space,json=freeSpace,proto3" json:"free_space,omitempty"`
	TotalRequests uint64                 `protobuf:"varint,4,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	mi := &file_proto_dfs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{15}
}

func (x *NodeInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NodeInfo) GetFreeSpace() uint64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

func (x *NodeInfo) GetTotalRequests() uint64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

// Chunk storage request from client to storage node
type ChunkStoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	ChunkIndex    uint32                 `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	ReplicaNodes  []string               `protobuf:"bytes,4,rep,name=replica_nodes,json=replicaNodes,proto3" json:"replica_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkStoreRequest) Reset() {
	*x = ChunkStoreRequest{}
	mi := &file_proto_dfs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkStoreRequest) ProtoMessage() {}

func (x *ChunkStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkStoreRequest.ProtoReflect.Descriptor instead.
func (*ChunkStoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{16}
}

func (x *ChunkStoreRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkStoreRequest) GetChunkIndex() uint32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ChunkStoreRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChunkStoreRequest) GetReplicaNodes() []string {
	if x != nil {
		return x.ReplicaNodes
	}
	return nil
}

// Chunk storage response from storage node
type ChunkStoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkStoreResponse) Reset() {
	*x = ChunkStoreResponse{}
	mi := &file_proto_dfs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkStoreResponse) ProtoMessage() {}

func (x *ChunkStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkStoreResponse.ProtoReflect.Descriptor instead.
func (*ChunkStoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{17}
}

func (x *ChunkStoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChunkStoreResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Chunk retrieve request to storage node
type ChunkRetrieveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkRetrieveRequest) Reset() {
	*x = ChunkRetrieveRequest{}
	mi := &file_proto_dfs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRetrieveRequest) ProtoMessage() {}

func (x *ChunkRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ChunkRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{18}
}

func (x *ChunkRetrieveRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

// Chunk retrieve response from storage node
type ChunkRetrieveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Corrupted     bool                   `protobuf:"varint,3,opt,name=corrupted,proto3" json:"corrupted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkRetrieveResponse) Reset() {
	*x = ChunkRetrieveResponse{}
	mi := &file_proto_dfs_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRetrieveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRetrieveResponse) ProtoMessage() {}

func (x *ChunkRetrieveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRetrieveResponse.ProtoReflect.Descriptor instead.
func (*ChunkRetrieveResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{19}
}

func (x *ChunkRetrieveResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChunkRetrieveResponse) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ChunkRetrieveResponse) GetCorrupted() bool {
	if x != nil {
		return x.Corrupted
	}
	return false
}

var File_proto_dfs_proto protoreflect.FileDescriptor

const file_proto_dfs_proto_rawDesc = "" +
	"\n" +
	"\x0fproto/dfs.proto\x12\x03dfs\"\x8c\b\n" +
	"\n" +
	"DFSMessage\x12.\n" +
	"\theartbeat\x18\x01 \x01(\v2\x0e.dfs.HeartbeatH\x00R\theartbeat\x128\n" +
	"\rstore_request\x18\x02 \x01(\v2\x11.dfs.StoreRequestH\x00R\fstoreRequest\x12;\n" +
	"\x0estore_response\x18\x03 \x01(\v2\x12.dfs.StoreResponseH\x00R\rstoreResponse\x12A\n" +
	"\x10retrieve_request\x18\x04 \x01(\v2\x14.dfs.RetrieveRequestH\x00R\x0fretrieveRequest\x12D\n" +
	"\x11retrieve_response\x18\x05 \x01(\v2\x15.dfs.RetrieveResponseH\x00R\x10retrieveResponse\x12;\n" +
	"\x0edelete_request\x18\x06 \x01(\v2\x12.dfs.DeleteRequestH\x00R\rdeleteRequest\x12>\n" +
	"\x0fdelete_response\x18\a \x01(\v2\x13.dfs.DeleteResponseH\x00R\x0edeleteResponse\x125\n" +
	"\flist_request\x18\b \x01(\v2\x10.dfs.ListRequestH\x00R\vlistRequest\x128\n" +
	"\rlist_response\x18\t \x01(\v2\x11.dfs.ListResponseH\x00R\flistResponse\x12H\n" +
	"\x13node_status_request\x18\n" +
	" \x01(\v2\x16.dfs.NodeStatusRequestH\x00R\x11nodeStatusRequest\x12K\n" +
	"\x14node_status_response\x18\v \x01(\v2\x17.dfs.NodeStatusResponseH\x00R\x12nodeStatusResponse\x12H\n" +
	"\x13chunk_store_request\x18\f \x01(\v2\x16.dfs.ChunkStoreRequestH\x00R\x11chunkStoreRequest\x12K\n" +
	"\x14chunk_store_response\x18\r \x01(\v2\x17.dfs.ChunkStoreResponseH\x00R\x12chunkStoreResponse\x12Q\n" +
	"\x16chunk_retrieve_request\x18\x0e \x01(\v2\x19.dfs.ChunkRetrieveRequestH\x00R\x14chunkRetrieveRequest\x12T\n" +
	"\x17chunk_retrieve_response\x18\x0f \x01(\v2\x1a.dfs.ChunkRetrieveResponseH\x00R\x15chunkRetrieveResponseB\t\n" +
	"\amessage\"\xa7\x01\n" +
	"\tHeartbeat\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"free_space\x18\x03 \x01(\x04R\tfreeSpace\x12%\n" +
	"\x0etotal_requests\x18\x04 \x01(\x04R\rtotalRequests\x12!\n" +
	"\fstored_files\x18\x05 \x03(\tR\vstoredFiles\"l\n" +
	"\tChunkInfo\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x04R\x04size\x12\x1a\n" +
	"\bchecksum\x18\x04 \x01(\fR\bchecksum\"\x87\x01\n" +
	"\fStoreRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x04R\ttotalSize\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x03 \x01(\rR\tchunkSize\x12\x1d\n" +
	"\n" +
	"num_chunks\x18\x04 \x01(\rR\tnumChunks\"O\n" +
	"\rStoreResponse\x12>\n" +
	"\x10chunk_placements\x18\x01 \x03(\v2\x13.dfs.ChunkPlacementR\x0fchunkPlacements\"q\n" +
	"\x0eChunkPlacement\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x1f\n" +
	"\vchunk_index\x18\x02 \x01(\rR\n" +
	"chunkIndex\x12#\n" +
	"\rstorage_nodes\x18\x03 \x03(\tR\fstorageNodes\"-\n" +
	"\x0fRetrieveRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\"\x90\x01\n" +
	"\x10RetrieveResponse\x12>\n" +
	"\x10chunk_placements\x18\x01 \x03(\v2\x13.dfs.ChunkPlacementR\x0fchunkPlacements\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x04R\ttotalSize\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x03 \x01(\rR\tchunkSize\"+\n" +
	"\rDeleteRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\"@\n" +
	"\x0eDeleteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"0\n" +
	"\vListRequest\x12!\n" +
	"\flist_request\x18\x01 \x01(\bR\vlistRequest\"3\n" +
	"\fListResponse\x12#\n" +
	"\x05files\x18\x01 \x03(\v2\r.dfs.FileInfoR\x05files\"Y\n" +
	"\bFileInfo\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x04R\x04size\x12\x1d\n" +
	"\n" +
	"num_chunks\x18\x03 \x01(\rR\tnumChunks\"4\n" +
	"\x11NodeStatusRequest\x12\x1f\n" +
	"\vnode_status\x18\x01 \x01(\bR\n" +
	"nodeStatus\"Z\n" +
	"\x12NodeStatusResponse\x12#\n" +
	"\x05nodes\x18\x01 \x03(\v2\r.dfs.NodeInfoR\x05nodes\x12\x1f\n" +
	"\vtotal_space\x18\x02 \x01(\x04R\n" +
	"totalSpace\"\x83\x01\n" +
	"\bNodeInfo\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"free_space\x18\x03 \x01(\x04R\tfreeSpace\x12%\n" +
	"\x0etotal_requests\x18\x04 \x01(\x04R\rtotalRequests\"\x88\x01\n" +
	"\x11ChunkStoreRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x1f\n" +
	"\vchunk_index\x18\x02 \x01(\rR\n" +
	"chunkIndex\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12#\n" +
	"\rreplica_nodes\x18\x04 \x03(\tR\freplicaNodes\"D\n" +
	"\x12ChunkStoreResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"1\n" +
	"\x14ChunkRetrieveRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"e\n" +
	"\x15ChunkRetrieveResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x1a\n" +
	"\bchecksum\x18\x02 \x01(\fR\bchecksum\x12\x1c\n" +
	"\tcorrupted\x18\x03 \x01(\bR\tcorruptedB\tZ\a./protob\x06proto3"

var (
	file_proto_dfs_proto_rawDescOnce sync.Once
	file_proto_dfs_proto_rawDescData []byte
)

func file_proto_dfs_proto_rawDescGZIP() []byte {
	file_proto_dfs_proto_rawDescOnce.Do(func() {
		file_proto_dfs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_dfs_proto_rawDesc), len(file_proto_dfs_proto_rawDesc)))
	})
	return file_proto_dfs_proto_rawDescData
}

var file_proto_dfs_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_dfs_proto_goTypes = []any{
	(*DFSMessage)(nil),            // 0: dfs.DFSMessage
	(*Heartbeat)(nil),             // 1: dfs.Heartbeat
	(*ChunkInfo)(nil),             // 2: dfs.ChunkInfo
	(*StoreRequest)(nil),          // 3: dfs.StoreRequest
	(*StoreResponse)(nil),         // 4: dfs.StoreResponse
	(*ChunkPlacement)(nil),        // 5: dfs.ChunkPlacement
	(*RetrieveRequest)(nil),       // 6: dfs.RetrieveRequest
	(*RetrieveResponse)(nil),      // 7: dfs.RetrieveResponse
	(*DeleteRequest)(nil),         // 8: dfs.DeleteRequest
	(*DeleteResponse)(nil),        // 9: dfs.DeleteResponse
	(*ListRequest)(nil),           // 10: dfs.ListRequest
	(*ListResponse)(nil),          // 11: dfs.ListResponse
	(*FileInfo)(nil),              // 12: dfs.FileInfo
	(*NodeStatusRequest)(nil),     // 13: dfs.NodeStatusRequest
	(*NodeStatusResponse)(nil),    // 14: dfs.NodeStatusResponse
	(*NodeInfo)(nil),              // 15: dfs.NodeInfo
	(*ChunkStoreRequest)(nil),     // 16: dfs.ChunkStoreRequest
	(*ChunkStoreResponse)(nil),    // 17: dfs.ChunkStoreResponse
	(*ChunkRetrieveRequest)(nil),  // 18: dfs.ChunkRetrieveRequest
	(*ChunkRetrieveResponse)(nil), // 19: dfs.ChunkRetrieveResponse
}
var file_proto_dfs_proto_depIdxs = []int32{
	1,  // 0: dfs.DFSMessage.heartbeat:type_name -> dfs.Heartbeat
	3,  // 1: dfs.DFSMessage.store_request:type_name -> dfs.StoreRequest
	4,  // 2: dfs.DFSMessage.store_response:type_name -> dfs.StoreResponse
	6,  // 3: dfs.DFSMessage.retrieve_request:type_name -> dfs.RetrieveRequest
	7,  // 4: dfs.DFSMessage.retrieve_response:type_name -> dfs.RetrieveResponse
	8,  // 5: dfs.DFSMessage.delete_request:type_name -> dfs.DeleteRequest
	9,  // 6: dfs.DFSMessage.delete_response:type_name -> dfs.DeleteResponse
	10, // 7: dfs.DFSMessage.list_request:type_name -> dfs.ListRequest
	11, // 8: dfs.DFSMessage.list_response:type_name -> dfs.ListResponse
	13, // 9: dfs.DFSMessage.node_status_request:type_name -> dfs.NodeStatusRequest
	14, // 10: dfs.DFSMessage.node_status_response:type_name -> dfs.NodeStatusResponse
	16, // 11: dfs.DFSMessage.chunk_store_request:type_name -> dfs.ChunkStoreRequest
	17, // 12: dfs.DFSMessage.chunk_store_response:type_name -> dfs.ChunkStoreResponse
	18, // 13: dfs.DFSMessage.chunk_retrieve_request:type_name -> dfs.ChunkRetrieveRequest
	19, // 14: dfs.DFSMessage.chunk_retrieve_response:type_name -> dfs.ChunkRetrieveResponse
	5,  // 15: dfs.StoreResponse.chunk_placements:type_name -> dfs.ChunkPlacement
	5,  // 16: dfs.RetrieveResponse.chunk_placements:type_name -> dfs.ChunkPlacement
	12, // 17: dfs.ListResponse.files:type_name -> dfs.FileInfo
	15, // 18: dfs.NodeStatusResponse.nodes:type_name -> dfs.NodeInfo
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_dfs_proto_init() }
func file_proto_dfs_proto_init() {
	if File_proto_dfs_proto != nil {
		return
	}
	file_proto_dfs_proto_msgTypes[0].OneofWrappers = []any{
		(*DFSMessage_Heartbeat)(nil),
		(*DFSMessage_StoreRequest)(nil),
		(*DFSMessage_StoreResponse)(nil),
		(*DFSMessage_RetrieveRequest)(nil),
		(*DFSMessage_RetrieveResponse)(nil),
		(*DFSMessage_DeleteRequest)(nil),
		(*DFSMessage_DeleteResponse)(nil),
		(*DFSMessage_ListRequest)(nil),
		(*DFSMessage_ListResponse)(nil),
		(*DFSMessage_NodeStatusRequest)(nil),
		(*DFSMessage_NodeStatusResponse)(nil),
		(*DFSMessage_ChunkStoreRequest)(nil),
		(*DFSMessage_ChunkStoreResponse)(nil),
		(*DFSMessage_ChunkRetrieveRequest)(nil),
		(*DFSMessage_ChunkRetrieveResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_dfs_proto_rawDesc), len(file_proto_dfs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_dfs_proto_goTypes,
		DependencyIndexes: file_proto_dfs_proto_depIdxs,
		MessageInfos:      file_proto_dfs_proto_msgTypes,
	}.Build()
	File_proto_dfs_proto = out.File
	file_proto_dfs_proto_goTypes = nil
	file_proto_dfs_proto_depIdxs = nil
}
